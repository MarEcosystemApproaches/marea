skip_if_not_installed("sf")
library(sf)
pts <- data.frame(x = 1:3, y = 1:3, mytemp = c(0.5, 1.5, 2.5))
sfo <- st_as_sf(pts, coords = c("x", "y"), crs = 4326)
est <- ea_st(
data = sfo,
value_col = "mytemp",
data_type = "ToyTemp",
region = "Tinyland",
time_descriptor = "early-spring",
units = "degC"
)
expect_s3_class(est, "ea_st")
expect_true(is.data.frame(est))
expect_true("value" %in% names(est))
expect_output(print(est), "ea_st Object")
expect_output(summary(est), "Summary of ea_st Object")
# All plot styles
for (style in c("fill", "bubble")) {
expect_s3_class(plot(est, style = style), "ggplot")
}
})
df <- data.frame(
year = 1:5,
value = 10:14
)
obj <- ea_data(
data = df,
value_col = "value",
data_type = "TestSubsetting",
region = "A",
location_descriptor = "B",
units = "x"
)
sub <- obj[1:2, ]
expect_s3_class(sub, "ea_data")
expect_equal(sub$meta$data_type, obj$meta$data_type)
expect_equal(nrow(sub$data), 2)
skip_if_not_installed("sf")
library(sf)
pts <- data.frame(x = 1:3, y = 1:3, mytemp = c(0.5, 1.5, 2.5))
sfo <- st_as_sf(pts, coords = c("x", "y"), crs = 4326)
est <- ea_st(
data = sfo,
value_col = "mytemp",
data_type = "ToyTemp",
region = "Tinyland",
time_descriptor = "early-spring",
units = "degC"
)
expect_s3_class(est, "ea_st")
expect_true(is.data.frame(est))
expect_true("value" %in% names(est))
expect_output(print(est), "ea_st Object")
expect_output(print(est), "Ecosystem Approach Spatio-Temporal")
expect_output(summary(est), "Summary of ea_st Object")
summary(est)
# All plot styles
for (style in c("fill", "bubble")) {
expect_s3_class(plot(est, style = style), "ggplot")
}
test_that("ea_st constructor and plot/print/summary work", {
skip_if_not_installed("sf")
library(sf)
pts <- data.frame(x = 1:3, y = 1:3, mytemp = c(0.5, 1.5, 2.5))
sfo <- st_as_sf(pts, coords = c("x", "y"), crs = 4326)
est <- ea_st(
data = sfo,
value_col = "mytemp",
data_type = "ToyTemp",
region = "Tinyland",
time_descriptor = "early-spring",
units = "degC"
)
expect_s3_class(est, "ea_st")
expect_true(is.data.frame(est))
expect_true("value" %in% names(est))
expect_output(print(est), "Ecosystem Approach Spatio-Temporal")
expect_output(summary(est), "Summary of ea_st Object")
# All plot styles
for (style in c("fill", "bubble")) {
expect_s3_class(plot(est, style = style), "ggplot")
}
})
test_that("as_ea_data and as_ea_st adapters work on pacea-like objects", {
# Simulate a pacea_index object using only attributes
d <- data.frame(year=1:3, val=11:13, anom=101:103)
attr(d, "long_name") <- "Fake PACEA Index"
attr(d, "axis_name") <- "Another Index Name"
class(d) <- c("pacea_index","tbl_df","tbl","data.frame")
out <- as_ea_data(d)
expect_s3_class(out, "ea_data")
expect_equal(out$meta$data_type, "Fake PACEA Index")
expect_true("value" %in% names(out$data))
# Simulate basic sf conversion only if sf is available
skip_if_not_installed("sf")
library(sf)
sf_obj <- st_as_sf(data.frame(x=1:2,y=1:2,temp=11:12), coords = c("x","y"), crs=4326)
attr(sf_obj, "axis_name") <- "GridTest"
attr(sf_obj, "units") <- "degC"
class(sf_obj) <- c("marea_st", class(sf_obj))
out_st <- as_ea_st(sf_obj, value_col = "temp")
expect_s3_class(out_st, "ea_st")
expect_true("value" %in% names(out_st))
})
# Simulate a pacea_index object using only attributes
d <- data.frame(year=1:3, val=11:13, anom=101:103)
attr(d, "long_name") <- "Fake PACEA Index"
attr(d, "axis_name") <- "Another Index Name"
class(d) <- c("pacea_index","tbl_df","tbl","data.frame")
out <- as_ea_data(d)
out <- as_ea_data(d, value = 'val')
expect_s3_class(out, "ea_data")
expect_equal(out$meta$data_type, "Fake PACEA Index")
expect_true("value" %in% names(out$data))
# Simulate basic sf conversion only if sf is available
skip_if_not_installed("sf")
library(sf)
sf_obj <- st_as_sf(data.frame(x=1:2,y=1:2,temp=11:12), coords = c("x","y"), crs=4326)
attr(sf_obj, "axis_name") <- "GridTest"
attr(sf_obj, "units") <- "degC"
class(sf_obj) <- c("marea_st", class(sf_obj))
out_st <- as_ea_st(sf_obj, value_col = "temp")
expect_s3_class(out_st, "ea_st")
expect_true("value" %in% names(out_st))
test_that("as_ea_data and as_ea_st adapters work on pacea-like objects", {
# Simulate a pacea_index object using only attributes
d <- data.frame(year=1:3, val=11:13, anom=101:103)
attr(d, "long_name") <- "Fake PACEA Index"
attr(d, "axis_name") <- "Another Index Name"
class(d) <- c("pacea_index","tbl_df","tbl","data.frame")
out <- as_ea_data(d, value = 'val')
expect_s3_class(out, "ea_data")
expect_equal(out$meta$data_type, "Fake PACEA Index")
expect_true("value" %in% names(out$data))
# Simulate basic sf conversion only if sf is available
skip_if_not_installed("sf")
library(sf)
sf_obj <- st_as_sf(data.frame(x=1:2,y=1:2,temp=11:12), coords = c("x","y"), crs=4326)
attr(sf_obj, "axis_name") <- "GridTest"
attr(sf_obj, "units") <- "degC"
class(sf_obj) <- c("marea_st", class(sf_obj))
out_st <- as_ea_st(sf_obj, value_col = "temp")
expect_s3_class(out_st, "ea_st")
expect_true("value" %in% names(out_st))
})
test_that("plot.ea_data produces valid ggplot objects for all styles", {
df <- data.frame(
year = 2010:2014,
value = c(1,2,3,2,1),
low = c(0,1,1,0,0),
high = c(2,3,5,3,2)
)
obj <- ea_data(
data = df,
value_col = "value",
data_type = "PlotTest",
region = "Caravan",
location_descriptor = "TestLocation",
units = "kg"
)
# Default style
p1 <- plot(obj, style = "default")
expect_s3_class(p1, "ggplot")
# Ribbon style (should succeed, relies on low/high columns)
p2 <- plot(obj, style = "ribbon")
expect_s3_class(p2, "ggplot")
# pacea style (requires low/high)
p3 <- plot(obj, style = "pacea")
expect_s3_class(p3, "ggplot")
# Plain style (just a line)
p4 <- plot(obj, style = "plain")
expect_s3_class(p4, "ggplot")
# Red-blue
p5 <- plot(obj, style = "red_blue")
expect_s3_class(p5, "ggplot")
# Should fail gracefully if low/high removed in ribbon style
obj_no_ci <- obj
obj_no_ci$data <- obj_no_ci$data[, !(names(obj_no_ci$data) %in% c("low", "high"))]
expect_error(plot(obj_no_ci, style = "ribbon"))
expect_error(plot(obj_no_ci, style = "pacea"))
})
df <- data.frame(
year = 2010:2014,
value = c(1,2,3,2,1),
low = c(0,1,1,0,0),
high = c(2,3,5,3,2)
)
obj <- ea_data(
data = df,
value_col = "value",
data_type = "PlotTest",
region = "Caravan",
location_descriptor = "TestLocation",
units = "kg"
)
# Default style
p1 <- plot(obj, style = "default")
expect_s3_class(p1, "ggplot")
# Ribbon style (should succeed, relies on low/high columns)
p2 <- plot(obj, style = "ribbon")
expect_s3_class(p2, "ggplot")
# pacea style (requires low/high)
p3 <- plot(obj, style = "pacea")
expect_s3_class(p3, "ggplot")
# Plain style (just a line)
p4 <- plot(obj, style = "plain")
expect_s3_class(p4, "ggplot")
# Red-blue
p5 <- plot(obj, style = "red_blue")
expect_s3_class(p5, "ggplot")
# Should fail gracefully if low/high removed in ribbon style
obj_no_ci <- obj
obj_no_ci$data <- obj_no_ci$data[, !(names(obj_no_ci$data) %in% c("low", "high"))]
expect_error(plot(obj_no_ci, style = "ribbon"))
expect_error(plot(obj_no_ci, style = "pacea"))
expect_error(plot(obj_no_ci, style = "pacea_biomass"))
plot(obj_no_ci, style = "pacea_biomass")
test_that("plot.ea_data produces valid ggplot objects for all styles", {
df <- data.frame(
year = 2010:2014,
value = c(1,2,3,2,1),
low = c(0,1,1,0,0),
high = c(2,3,5,3,2)
)
obj <- ea_data(
data = df,
value_col = "value",
data_type = "PlotTest",
region = "Caravan",
location_descriptor = "TestLocation",
units = "kg"
)
# Default style
p1 <- plot(obj, style = "default")
expect_s3_class(p1, "ggplot")
# Ribbon style (should succeed, relies on low/high columns)
p2 <- plot(obj, style = "ribbon")
expect_s3_class(p2, "ggplot")
# pacea style (requires low/high)
p3 <- plot(obj, style = "pacea")
expect_s3_class(p3, "ggplot")
# Plain style (just a line)
p4 <- plot(obj, style = "plain")
expect_s3_class(p4, "ggplot")
# Red-blue
p5 <- plot(obj, style = "red_blue")
expect_s3_class(p5, "ggplot")
# Should fail gracefully if low/high removed in ribbon style
obj_no_ci <- obj
obj_no_ci$data <- obj_no_ci$data[, !(names(obj_no_ci$data) %in% c("low", "high"))]
expect_error(plot(obj_no_ci, style = "ribbon"))
})
test_that("plot.ea_st produces valid ggplot objects for all spatial styles", {
skip_if_not_installed("sf")
library(sf)
sfdat <- st_as_sf(data.frame(x=1:3, y=1:3, val=c(10,20,30)), coords=c("x","y"), crs=4326)
est <- ea_st(
data = sfdat,
value_col = "val",
data_type = "PlotTestSpatial",
region = "Nowhere",
time_descriptor = "FakeSlice",
units = "degB"
)
styles <- c("fill", "bubble")
for (sm in styles) {
expect_s3_class(plot(est, style = sm), "ggplot")
}
})
test_that("plot.ea_data passes ... to ggplot geoms", {
df <- data.frame(year=2000:2002, value=1:3)
obj <- ea_data(
data = df,
value_col = "value",
data_type = "GeomArgsTest",
region = "Testreg",
location_descriptor = "Locy",
units = "Zol"
)
# Custom color/size
p <- plot(obj, color = "orange", size = 4)
expect_s3_class(p, "ggplot")
})
df <- data.frame(year=2000:2002, value=1:3)
obj <- ea_data(
data = df,
value_col = "value",
data_type = "GeomArgsTest",
region = "Testreg",
location_descriptor = "Locy",
units = "Zol"
)
# Custom color/size
p <- plot(obj, color = "orange", size = 4)
plot(obj)
# Custom color/size
p <- plot(obj, color = "orange")
p
expect_s3_class(p, "ggplot")
# test that summary, print and plot all interact without side effects
test_that("plot, print, summary play nicely together", {
df <- data.frame(year=1990:1994, value=10:14)
obj <- ea_data(
data = df, value_col="value",
data_type="Test", region="R", location_descriptor="L", units="u"
)
expect_output(print(obj), "EA Data Object")
expect_output(summary(obj), "Summary of ea_data")
expect_s3_class(plot(obj), "ggplot")
})
df <- data.frame(year=1990:1994, value=10:14)
obj <- ea_data(
data = df, value_col="value",
data_type="Test", region="R", location_descriptor="L", units="u"
)
expect_output(print(obj), "EA Data Object")
expect_output(print(obj), "Ecosystem Approach \(EA\) Data Object")
expect_output(print(obj), "Ecosystem Approach \EA\ Data Object")
expect_output(print(obj), "Ecosystem Approach \(EA\) Data Object")
expect_output(print(obj), "Ecosystem Approach \(\EA\)\ Data Object")
expect_output(print(obj), "Ecosystem Approach \\(EA\\) Data Object", fixed = FALSE)
expect_output(summary(obj), "Summary of ea_data")
expect_s3_class(plot(obj), "ggplot")
devtools::document()
data(oni)
View(oni)
source("~/GitHub/marea/data-raw/coastwide-indices/coastwide-indices.R")
source("~/GitHub/marea/data-raw/coastwide-indices/coastwide-indices.R")
oni <- make_ea_index(
df = oni_new,
value_col = "ANOM",
data_type = "Oceanic Niño Index",
region = "Niño 3.4 Region (Pacific)",
location = "5°N–5°S, 120°W–170°W",
units = "deg C anomaly",
source = "NOAA CPC, https://www.cpc.ncep.noaa.gov/products/analysis_monitoring/ensostuff/ensoyears.shtml"
)
# ---- ONI ----
download.file("https://www.cpc.ncep.noaa.gov/data/indices/oni.ascii.txt",
destfile = "oni.txt", mode = "wb", quiet = FALSE)
oni_new <- read_table("oni.txt")
stopifnot(colnames(oni_new) == c("SEAS", "YR", "TOTAL", "ANOM"),
oni_new[1, 1] == "DJF")
colnames(oni_new) <- c("month", "year", "value", "anomaly")
oni_new <- relocate(oni_new, year)
oni_new$month <- as.numeric(
factor(oni_new$month, levels = unique(oni_new$month), ordered = TRUE)
)
oni <- make_ea_index(
df = oni_new,
value_col = "value",
data_type = "Oceanic Niño Index",
region = "Niño 3.4 Region (Pacific)",
location = "5°N–5°S, 120°W–170°W",
units = "deg C anomaly",
source = "NOAA CPC, https://www.cpc.ncep.noaa.gov/products/analysis_monitoring/ensostuff/ensoyears.shtml"
)
usethis::use_data(oni, overwrite = TRUE)
# ---- PDO ----
download.file("https://www.ncei.noaa.gov/pub/data/cmb/ersst/v5/index/ersst.v5.pdo.dat",
destfile = "pdo.txt", mode = "wb", quiet = FALSE)
pdo_raw <- read_table("pdo.txt", skip = 1, na = "99.99")
stopifnot(pdo_raw[1,1] == 1854)
pdo_long <- tidyr::pivot_longer(pdo_raw, cols = "Jan":"Dec",
names_to = "month", values_to = "anomaly") %>%
mutate(month = as.numeric(match(month, month.abb))) %>%
rename(year = Year) %>%
filter(!is.na(anomaly))
pdo <- make_ea_index(
df = pdo_long,
value_col = "anomaly",
data_type = "Pacific Decadal Oscillation",
region = "North Pacific",
location = "PDO index area",
units = "", # Standardized
source = "NOAA ERSST, https://www.ncei.noaa.gov/access/monitoring/pdo/"
)
usethis::use_data(pdo, overwrite = TRUE)
# ---- SOI ----
download.file("https://www.cpc.ncep.noaa.gov/data/indices/soi",
destfile = "soi.txt", mode = "wb", quiet = FALSE)
soi_new <- read.table("soi.txt", skip = 3, as.is = TRUE, header = TRUE, fill = TRUE)
names(soi_new)[1] <- "year"
soi_new$year <- as.numeric(soi_new$year)
soi_new <- soi_new[1:(min(which(is.na(soi_new$year))) - 1), ]
soi_new[nrow(soi_new), ] <- stringr::str_replace_all(soi_new[nrow(soi_new), ], "-999.9", "")
soi_new <- dplyr::mutate_all(soi_new, as.numeric)
soi_long <- tidyr::pivot_longer(soi_new, cols = "JAN":"DEC", names_to = "month", values_to = "anomaly") %>%
mutate(month = as.numeric(match(month, toupper(month.abb)))) %>%
filter(!is.na(anomaly))
soi <- make_ea_index(
df = soi_long,
value_col = "anomaly",
data_type = "Southern Oscillation Index",
region = "Equatorial Pacific",
location = "Tahiti-Darwin (SLP diff)",
units = "", # index
source = "NOAA CPC, https://www.cpc.ncep.noaa.gov/data/indices/soi"
)
usethis::use_data(soi, overwrite = TRUE)
# ---- NPGO ----
download.file("http://www.o3d.org/npgo/data/NPGO.txt",
destfile = "npgo.txt", mode = "wb", quiet = FALSE)
npgo_raw <- read.table("npgo.txt", skip = 5, as.is = TRUE, header = FALSE, fill = TRUE, comment = "#") %>%
as_tibble() %>%
rename(year = V1, month = V2, anomaly = V3) %>%
filter(!is.na(month)) %>%
mutate(year = as.numeric(year))
npgo <- make_ea_index(
df = npgo_raw,
value_col = "anomaly",
data_type = "North Pacific Gyre Oscillation",
region = "North Pacific Gyre",
location = "NPGO",
units = "normalized anomaly",
source = "Di Lorenzo et al., http://www.o3d.org/npgo/"
)
usethis::use_data(npgo, overwrite = TRUE)
# ---- MEI ----
download.file("https://psl.noaa.gov/enso/mei/data/meiv2.data",
destfile = "mei.txt", mode = "wb", quiet = FALSE)
mei_new <- read.table("mei.txt", skip = 1, as.is = TRUE, fill = TRUE) %>% as_tibble()
names(mei_new) <- c("year", 1:12)
mei_new$year <- as.numeric(mei_new$year)
mei_new <- mei_new[seq_len(which(mei_new$year == -999)[1] - 1), ]
mei_long <- tidyr::pivot_longer(mei_new, cols = "1":"12", names_to = "month", values_to = "anomaly") %>%
mutate(month = as.numeric(month), anomaly = as.numeric(anomaly)) %>%
filter(anomaly != -999)
mei <- make_ea_index(
df = mei_long,
value_col = "anomaly",
data_type = "Multivariate ENSO Index (Version 2)",
region = "Equatorial Pacific",
location = "MEI composite",
units = "standardized anomaly",
source = "NOAA ESRL/PSL, https://psl.noaa.gov/enso/mei/"
)
usethis::use_data(mei, overwrite = TRUE)
# ---- AO ----
download.file("https://www.cpc.ncep.noaa.gov/products/precip/CWlink/daily_ao_index/monthly.ao.index.b50.current.ascii.table",
destfile = "ao.txt", mode = "wb", quiet = FALSE)
ao_raw <- read.table("ao.txt", header = TRUE, fill = TRUE)
ao_years <- as.numeric(row.names(ao_raw))
ao_long <- cbind(year = ao_years, ao_raw) %>%
as_tibble()
row.names(ao_long) <- NULL
ao_long2 <- tidyr::pivot_longer(ao_long, cols = "Jan":"Dec", names_to = "month", values_to = "anomaly") %>%
mutate(month = as.numeric(match(month, month.abb))) %>%
filter(!is.na(anomaly))
ao <- make_ea_index(
df = ao_long2,
value_col = "anomaly",
data_type = "Arctic Oscillation Index",
region = "Northern Hemisphere",
location = "AO PCA",
units = "",
source = "NOAA CPC, https://www.cpc.ncep.noaa.gov/products/precip/CWlink/daily_ao_index/"
)
usethis::use_data(ao, overwrite = TRUE)
# ---- END ----
message("All coastwide indices updated using ea_data class and with full metadata.")
library(marea)
pkgload::load_all()
devtools::document(
load_code = pkgload::load_all
)
roxygen2::roxygenise(
".",
load_code = pkgload::load_all
)
roxygenize(".")
library(roxygen2)
roxygenize(".")
roxygenize(".")
files <- list.files("R/", pattern = "\\.R$", full.names = TRUE)
for(file in files) {
cat("Testing file:", basename(file), "\n")
tryCatch({
# Parse just this file
roxygen2:::tokenize_file(file)
cat("✓ OK\n")
}, error = function(e) {
cat("✗ ERROR:", e$message, "\n")
})
}
files <- list.files(".", pattern = "\\.R$", full.names = TRUE, recursive = TRUE)
for(file in files) {
cat("Testing file:", basename(file), "\n")
tryCatch({
# Parse just this file
roxygen2:::tokenize_file(file)
cat("✓ OK\n")
}, error = function(e) {
cat("✗ ERROR:", e$message, "\n")
})
}
files <- list.files(".", pattern = "\\.R$", full.names = TRUE, recursive = TRUE)
for(file in files) {
cat("Testing file:", basename(file), "\n")
# Parse just this file
roxygen2:::tokenize_file(file)
cat("✓ OK\n")
}
devtools::document()
pkgload::load_pkgload()
pkgload::load_all()
roxygen2::roxygenise('.', clean = TRUE)
roxygen2::roxygenise('.',roclets = 'NAMESPACE', clean = TRUE)
roxygen2::roxygenise('.',roclets = c('NAMESPACE'), clean = TRUE)
roxygen2::roxygenise('.',roclets = c("NAMESPACE"), clean = TRUE)
roxygen2::roxygenise('.', roclets = c("NAMESPACE"))
