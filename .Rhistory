} else {
if (i %in% metadataNames) {
return(x$meta[[i]])
}
}
}
)
azmp_bottom_temperature[['data']]
#' Create an ea_data S4 object
#'
setGeneric("ea_data", function(data, value_col, data_type, region,
location_descriptor, units, species = NA_character_,
source_citation = "No citation provided", ...) {
standardGeneric("ea_data")
})
setMethod("ea_data", signature(data = "data.frame", value_col = "character"),
function(data, value_col, data_type, region,
location_descriptor, units, species = NA_character_,
source_citation = "No citation provided", ...) {
# --- Validation ---
if (!value_col %in% names(data)) {
stop(paste0("Column '", value_col, "' not found in the data."), call. = FALSE)
}
if (!"year" %in% names(data)) {
stop("`data` must contain a 'year' column.", call. = FALSE)
}
if (!is.numeric(data[[value_col]]) || !is.numeric(data$year)) {
stop(paste0("Columns 'year' and '", value_col, "' must be numeric."), call. = FALSE)
}
# --- Standardize ---
original_value_col <- value_col
data <- dplyr::rename(data, value = !!original_value_col)
# --- Metadata ---
meta <- list(
data_type = as.character(data_type),
region = as.character(region),
location_descriptor = as.character(location_descriptor),
units = as.character(units),
species = as.character(species),
source_citation = as.character(source_citation),
original_value_col = original_value_col,
...
)
# --- Construct S4 object ---
new("ea_data", data = tibble::as_tibble(data), meta = meta)
})
# Define the class
setClass(
Class = "ea_data",
slots = list(
meta = "list",
data = "list"
)
)
# 3. S3 methods
setMethod(
f = "[[",
signature(x = "ea_data", i = "ANY"),
definition = function(x, i, ...) {
metadataNames <- sort(names(x@meta))
dataNames <- sort(names(x@data))
if (i == "meta") {
return(x@meta)
} else if (i == "data") {
return(x@data)
} else if (i %in% metadataNames) {
return(x@meta[[i]])
} else if (i %in% dataNames) {
return(x@data[[i]])
} else {
stop(sprintf("Element '%s' not found in 'meta' or 'data'", i))
}
}
)
#' Allows for row-based subsetting of the data component while preserving
#' the metadata and class. Column subsetting is disabled to maintain integrity.
#'
#' @param x An object of class `ea_data`.
#' @param i Row indices to subset.
#' @param j Column indices (ignored).
#' @param ... Additional arguments (ignored).
#' @return A new, subsetted `ea_data` object.
#'
#'
setMethod(
f = "[",
signature(x = "ea_data", i = "ANY", j = "missing"),
definition = function(x, i, j, ..., drop = FALSE) {
subset_data <- x@data[i, , drop = FALSE]
new("ea_data", data = subset_data, meta = x@meta)
}
)
setValidity("ea_data", function(object) {
if (!"year" %in% names(object@data)) return("Missing 'year' column in data")
if (!"value" %in% names(object@data)) return("Missing 'value' column in data")
TRUE
})
ea_dat(azmp_bottom_temperature)
ea_data(azmp_bottom_temperature)
new('ea_data', data = azmp_bottom_temperature)
new('ea_data', data = azmp_bottom_temperature$data, meta = azmp_bottom_temperature$meta)
azmp_bottom_temperature <- new('ea_data', data = azmp_bottom_temperature$data, meta = azmp_bottom_temperature$meta)
azmp_bottom_temperature@meta
azmp_bottom_temperature[['units']]
azmp_bottom_temperature[2]
azmp_bottom_temperature[2,]
#' Allows for row-based subsetting of the data component while preserving
#' the metadata and class. Column subsetting is disabled to maintain integrity.
#'
#' @param x An object of class `ea_data`.
#' @param i Row indices to subset.
#' @param j Column indices (ignored).
#' @param ... Additional arguments (ignored).
#' @return A new, subsetted `ea_data` object.
#'
#'
setMethod(
f = "[",
signature(x = "ea_data", i = "ANY", j = "ANY"),
definition = function(x, i, j, ..., drop = FALSE) {
warning("Column subsetting (`j`) is not supported and will be ignored to preserve object structure.")
subset_data <- x@data[i, , drop = FALSE]
new("ea_data", data = subset_data, meta = x@meta)
}
)
azmp_bottom_temperature[2]
azmp_bottom_temperature['year' == 1953]
azmp_bottom_temperature[2, 1]
azmp_bottom_temperature@data[1]
azmp_bottom_temperature@data[1, ]
azmp_bottom_temperature@data[[1,]]
#' Subset an ea_data object by a logical condition
#'
#' @param x An `ea_data` object.
#' @param condition A logical expression using column names from the data slot.
#' @return A new `ea_data` object with rows matching the condition.
#' @examples
#' subset_ea(azmp_bottom_temperature, year == 1953)
subset_ea <- function(x, condition) {
if (!inherits(x, "ea_data")) stop("x must be an ea_data object.")
# Evaluate the condition in the context of the data
rows <- eval(substitute(condition), envir = x@data, enclos = parent.frame())
# Subset and return a new ea_data object
new("ea_data", data = x@data[rows, , drop = FALSE], meta = x@meta)
}
#' Subset an ea_data object by a logical condition
#'
#' @param x An `ea_data` object.
#' @param condition A logical expression using column names from the data slot.
#' @return A new `ea_data` object with rows matching the condition.
#' @examples
#' subset_ea(azmp_bottom_temperature, year == 1953)
ea.subset <- function(x, condition) {
if (!inherits(x, "ea_data")) stop("x must be an ea_data object.")
# Evaluate the condition in the context of the data
rows <- eval(substitute(condition), envir = x@data, enclos = parent.frame())
# Subset and return a new ea_data object
new("ea_data", data = x@data[rows, , drop = FALSE], meta = x@meta)
}
ea.subset(azmp_bottom_temperature, year = 1953)
ea.subset(azmp_bottom_temperature, year == 1953)
ea.subset(azmp_bottom_temperature, 'year' == 1953)
condition = `year == 1953`
condition = 'year == 1953'
# Evaluate the condition in the context of the data
rows <- eval(substitute(condition), envir = x@data, enclos = parent.frame())
x <- azmp_bottom_temperature
# Evaluate the condition in the context of the data
rows <- eval(substitute(condition), envir = x@data, enclos = parent.frame())
rows
ea.subset(azmp_bottom_temperature, year = 1953)
ea.subset(azmp_bottom_temperature, year == 1953)
#' Subset an ea_data object using a logical condition
#'
#' @param x An ea_data object.
#' @param condition A logical expression using column names from the data slot.
#' @return A new ea_data object with filtered rows.
#' @examples
#' ea.subset(azmp_bottom_temperature, year == 1953)
ea.subset <- function(x, condition) {
if (!inherits(x, "ea_data")) stop("x must be an ea_data object.")
# Capture the condition expression
condition_expr <- substitute(condition)
# Evaluate the condition in the context of the data slot
rows <- eval(condition_expr, envir = x@data, enclos = parent.frame())
# Ensure the result is a logical vector
if (!is.logical(rows) || length(rows) != nrow(x@data)) {
stop("Condition must return a logical vector of the same length as the number of rows in the data.")
}
# Subset and return a new ea_data object
new("ea_data", data = x@data[rows, , drop = FALSE], meta = x@meta)
}
ea.subset(azmp_bottom_temperature, year == 1953)
if (!inherits(x, "ea_data")) stop("x must be an ea_data object.")
# Capture the condition expression
condition_expr <- substitute(condition)
condition_expr
condition = 'year == 1953'
# Evaluate the condition in the context of the data slot
rows <- eval(condition_expr, envir = x@data, enclos = parent.frame())
rows
#' Subset an ea_data object by column and value(s)
#'
#' @param x An ea_data object.
#' @param column A character string naming the column in the data slot.
#' @param value A value or vector of values to match.
#' @return A new ea_data object with rows where column == value (or %in% value).
#' @examples
#' ea.subset(azmp_bottom_temperature, "year", 1953)
#' ea.subset(azmp_bottom_temperature, "region", c("Scotian Shelf", "Gulf"))
ea.subset <- function(x, column, value) {
if (!inherits(x, "ea_data")) stop("x must be an ea_data object.")
if (!column %in% names(x@data)) stop(paste("Column", column, "not found in data."))
# Subset rows where column matches value(s)
rows <- x@data[[column]] %in% value
# Return new ea_data object
new("ea_data", data = x@data[rows, , drop = FALSE], meta = x@meta)
}
ea.subset(azmp_bottom_temperature, 'year', 1953)
# Subset rows where column matches value(s)
rows <- x[[column]] %in% value
column = 'year'
value = 1953
# Subset rows where column matches value(s)
rows <- x[[column]] %in% value
x@data[rows, , drop = FALSE]
x@data[rows, drop = FALSE]
x@data[rows, , drop = FALSE]
# Define the class
setClass(
Class = "ea_data",
slots = list(
meta = "list",
data = "data.frame"
)
)
azmp_bottom_temperature <- new('ea_data', data = as.data.frame(azmp_bottom_temperature@data), meta = azmp_bottom_temperature$list)
azmp_bottom_temperature <- new('ea_data', data = as.data.frame(azmp_bottom_temperature@data), meta = azmp_bottom_temperature$meta)
azmp_bottom_temperature <- new('ea_data', data = as.data.frame(azmp_bottom_temperature@data), meta = azmp_bottom_temperature@meta)
ea.subset(azmp_bottom_temperature, 'year', 1953)
setMethod(
f = "[",
signature(x = "ea_data", i = "ANY", j = "ANY"),
definition = function(x, i, j, ..., drop = FALSE) {
warning("Column subsetting (`j`) is not supported and will be ignored to preserve object structure.")
subset_data <- x@data[i, , drop = FALSE]
new("ea_data", data = subset_data, meta = x@meta)
}
)
azmp_bottom_temperature[2]
devtools::document()
devtools::document()
devtools::document()
devtools::document()
source("~/GitHub/marea/R/ea_spatial_class.R")
glorys_bottom_temperature <- new('ea_spatial', meta = glorys_bottom_temperature$meta, data = glorys_bottom_temperature$data)
glorys_bottom_temperature[[units]]
glorys_bottom_temperature[['units']]
glorys_bottom_temperature[['time_descriptor']]
glorys_bottom_temperature[['year']]
install.packages('terra')
devtools::document()
devtools::document()
library(marea)
data_names <- data(package = "marea")$results[, "Item"]
# List your known spatial and tabular exceptions
EXCLUSIONS <- c("food_habits", "pacea_indices")
TARGET_ST_CLASSES <- c("marea_spatial", "pacea_spatial", "sf")
TARGET_TS_CLASSES <- c("pacea_index", "pacea_biomass", "pacea_recruitment")
obj_names <- data_names[1]
obj_names
obj <- get(obj_name)
obj_name <- data_names[1]
obj <- get(obj_name)
obj_class <- class(obj)
new_obj <- NULL
TARGET_ST_CLASSES %in% obj_class
TARGET_ST_CLASSES
EXCLUSIONS <- c("food_habits")
TARGET_ST_CLASSES <- c("ea_spatial", "ea_st")
TARGET_TS_CLASSES <- c("ea_data")
obj_class
TARGET_TS_CLASSES
cat("Converting", obj_name, "as time series to ea_data...\n")
new_obj <- as_ea_data(obj)  # Calls your package's robust adapter
View(new_obj)
?ea_data
source("~/GitHub/marea/R/as_ea_data.R")
new_obj <- as_ea_data(obj)  # Calls your package's robust adapter
source("~/GitHub/marea/R/as_ea_data.R")
new_obj <- as_ea_data(obj)  # Calls your package's robust adapter
new_obj <- as_ea_data(obj)  # Calls your package's robust adapter
source("~/GitHub/marea/R/as_ea_data.R")
new_obj <- as_ea_data(obj)  # Calls your package's robust adapter
new_obj <- NULL
new_obj <- as_ea_data(obj)  # Calls your package's robust adapter
library(marea)
data_names <- data(package = "marea")$results[, "Item"]
EXCLUSIONS <- c("food_habits")
TARGET_ST_CLASSES <- c("ea_spatial", "ea_st")
TARGET_TS_CLASSES <- c("ea_data")
obj <- get(obj_name)
obj_class <- class(obj)
new_obj <- NULL
# Dispatch to correct function
if (any(TARGET_ST_CLASSES %in% obj_class)) {
cat("Converting", obj_name, "as spatial data to ea_spatial...\n")
new_obj <- as_ea_spatial(obj)
} else if (any(TARGET_TS_CLASSES %in% obj_class)) {
cat("Converting", obj_name, "as time series to ea_data...\n")
new_obj <- as_ea_data(obj)
} else {
cat("Skipping", obj_name, "(class", obj_class[1], "not handled)\n")
next
}
source("~/GitHub/marea/R/as_ea_data.R")
new_obj <- as_ea_data(obj)
library(marea)
library(dplyr)
data_names <- data(package = "marea")$results[, "Item"]
EXCLUSIONS <- c("food_habits")
TARGET_ST_CLASSES <- c("ea_spatial", "ea_st")
TARGET_TS_CLASSES <- c("ea_data")
for (obj_name in data_names) {
if (obj_name %in% EXCLUSIONS) {
cat("Skipping", obj_name, "(excluded)\n")
next
}
obj <- get(obj_name, envir = asNamespace("marea"))
obj_class <- class(obj)
new_obj <- NULL
# Dispatch to correct function
if (any(TARGET_ST_CLASSES %in% obj_class)) {
cat("Converting", obj_name, "as spatial data to ea_spatial...\n")
new_obj <- as_ea_spatial(obj)
} else if (any(TARGET_TS_CLASSES %in% obj_class)) {
cat("Converting", obj_name, "as time series to ea_data...\n")
new_obj <- as_ea_data(obj)
} else {
cat("Skipping", obj_name, "(class", obj_class[1], "not handled)\n")
next
}
# Validate and confirm S4 conversion
if (!methods::is(new_obj, "ea_data") && !methods::is(new_obj, "ea_spatial")) {
warning("Conversion failed for ", obj_name, ": result is not an S4 object.")
next
}
validObject(new_obj)
# Save the new migrated object
assign(obj_name, new_obj)
save(list = obj_name, file = file.path("data", paste0(obj_name, ".rda")), compress = "bzip2", version = 2)
cat("Saved", obj_name, "\n")
}
source("~/.active-rstudio-document")
data_names <- data(package = "marea")$results[, "Item"]
load_all(marea)
devtools::load_all()
load("~/GitHub/marea/data/ao.rda")
migrate_ea_objects()
objs <- ls(env)
env = .GlobalEnv
objs <- ls(env)
converted <- list()
objs
obj <- get(obj_name, envir = env)
obj_name ='ao'
obj <- get(obj_name, envir = env)
# --- Migrate ea_data ---
if (is.list(obj) && inherits(obj, "ea_data") && !methods::is(obj, "ea_data")) {
if (!all(c("data", "meta") %in% names(obj))) next
meta <- obj$meta
data <- obj$data
if (!is.data.frame(data)) next
if (!"year" %in% names(data) || !"value" %in% names(data)) next
# Reconstruct using the S4 constructor
new_obj <- ea_data(
data = data,
value_col = meta$original_value_col %||% "value",
data_type = meta$data_type,
region = meta$region,
location_descriptor = meta$location_descriptor,
units = meta$units,
species = meta$species %||% NA_character_,
source_citation = meta$source_citation %||% "No citation provided"
)
assign(obj_name, new_obj, envir = env)
converted[[obj_name]] <- "ea_data"
# --- Migrate ea_spatial ---
} else if (is.list(obj) && inherits(obj, "ea_spatial") && !methods::is(obj, "ea_spatial")) {
if (!all(c("data", "meta") %in% names(obj))) next
meta <- obj$meta
data <- obj$data
if (!inherits(data, c("sf", "stars", "SpatRaster"))) next
if (!"value" %in% names(data)) next
# Reconstruct using the S4 constructor
new_obj <- ea_spatial(
data = data,
value_col = meta$original_value_col %||% "value",
data_type = meta$data_type,
region = meta$region,
time_descriptor = meta$time_descriptor,
units = meta$units,
source_citation = meta$source_citation %||% "No citation provided"
)
assign(obj_name, new_obj, envir = env)
converted[[obj_name]] <- "ea_spatial"
}
is.list(obj) && inherits(obj, "ea_data") && !methods::is(obj, "ea_data")
methods::is(obj, "ea_data")
is.list(obj)
names(obj)
if (!all(c("data", "meta") %in% names(obj))) next
meta <- obj$meta
data <- obj$data
if (!is.data.frame(data)) next
if (!"year" %in% names(data) || !"value" %in% names(data)) next
# Reconstruct using the S4 constructor
new_obj <- ea_data(
data = data,
value_col = meta$original_value_col %||% "value",
data_type = meta$data_type,
region = meta$region,
location_descriptor = meta$location_descriptor,
units = meta$units,
species = meta$species %||% NA_character_,
source_citation = meta$source_citation %||% "No citation provided"
)
# Reconstruct using the S4 constructor
new_obj <- ea_data(
data = data,
value_col =  "value",
data_type = meta$data_type,
region = meta$region,
location_descriptor = meta$location_descriptor,
units = meta$units,
species = meta$species %||% NA_character_,
source_citation = meta$source_citation %||% "No citation provided"
)
source("~/GitHub/marea/R/ea_data_class.R")
# Reconstruct using the S4 constructor
new_obj <- ea_data(
data = data,
value_col =  "value",
data_type = meta$data_type,
region = meta$region,
location_descriptor = meta$location_descriptor,
units = meta$units,
species = meta$species %||% NA_character_,
source_citation = meta$source_citation %||% "No citation provided"
)
source("~/.active-rstudio-document")
migrate_ea_objects()
usethis::use_data(ao, overwrite = TRUE)
load("~/GitHub/marea/data/ao.rda")
load("~/GitHub/marea/data/azmp_bottom_temperature.rda")
load("~/GitHub/marea/data/glorys_bottom_temperature.rda")
load("~/GitHub/marea/data/grey_seals_2021.rda")
load("~/GitHub/marea/data/grey_seals.rda")
load("~/GitHub/marea/data/mei.rda")
load("~/GitHub/marea/data/nao.rda")
load("~/GitHub/marea/data/npgo.rda")
load("~/GitHub/marea/data/oni.rda")
load("~/GitHub/marea/data/pdo.rda")
load("~/GitHub/marea/data/soi.rda")
migrate_ea_data()
source("~/GitHub/marea/data-raw/ea_migrate.R")
migrate_ea_objects()
usethis::use_data(azmp_bottom_temperature, overwrite = TRUE)
azmp_bottom_temperature[['original_value_col']] <- 'anomaly'
x <- azmp_bottom_temperature
azmp_bottom_temperature@meta$original_value_col <- 'anomaly'
usethis::use_data(azmp_bottom_temperature, overwrite = TRUE)
source("~/GitHub/marea/data-raw/ea_migrate.R")
migrate_ea_objects()
source("~/GitHub/marea/R/as_ea_spatial.R")
migrate_ea_objects()
source("~/GitHub/marea/data-raw/ea_migrate.R")
migrate_ea_objects()
obj <- glorys_bottom_temperature
is.list(obj)
if (!all(c("data", "meta") %in% names(obj))) next
meta <- obj$meta
obj <- glorys_bottom_temperature
meta <- obj$meta
View(obj)
usethis::use_data(glorys_bottom_temperature, overwrite = TRUE)
usethis::use_data(grey_seals, overwrite = TRUE)
usethis::use_data(grey_seals_2021, overwrite = TRUE)
usethis::use_data(mei, overwrite = TRUE)
usethis::use_data(nao, overwrite = TRUE)
usethis::use_data(npgo, overwrite = TRUE)
usethis::use_data(oni, overwrite = TRUE)
usethis::use_data(pdo, overwrite = TRUE)
usethis::use_data(soi, overwrite = TRUE)
load("~/GitHub/marea/data/food_habits.rda")
fh_ea <- new('ea_data', data = food_habits)
fh <-  food_habits %>% mutate(year = format(as.Date(SDATE), '%Y'))
fh <-  food_habits %>% mutate(year = format(as.Date(food_habits$SDATE), '%Y'))
as.Date(food_habits$SDATE)
as.Date(food_habits$SDATE, '%d-%b-%Y')
fh <-  food_habits %>% mutate(year = format(as.Date(food_habits$SDATE, '%d-%b-%Y'), '%Y'))
fh_ea <- new('ea_data', data = fh)
fh_ea <- new('ea_data', data = fh, value = 'FSHNO')
fh_ea <- as_ea_data(fh, value = 'FSHNO')
fh <-  food_habits %>% mutate(year = as.numeric(format(as.Date(food_habits$SDATE, '%d-%b-%Y'), '%Y')))
fh_ea <- as_ea_data(fh, value = 'FSHNO')
View(fh_ea)
food_habits <- fh_ea
usethis::use_data(food_habits, overwrite = TRUE)
devtools::document()
devtools::document()
devtools::check()
